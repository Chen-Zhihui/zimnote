Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-08-16T19:47:08+08:00

====== CV应用框架 ======

Created 星期四 16 八月 2018

====== 目标 ======

* CV的常用算法
* 内在逻辑，CV的模型

====== 应用 ======

[[+cv应用]]


===== 人脸识别 =====


===== 探伤 =====
IDEA: 考虑一个模型，把探伤的模型规划出来，然后找赵云松
IDEA: 探伤软件

===== 胸片 =====

===== 视频索引 =====

===== 车牌识别 =====
APP: License-Plate https://github.com/zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9

====== 研发平台 ======

===== 研究算法 =====
	* 展示对比结果的工具
		* 三维显示框架
		* 已有一些算法可用
		* 还可以用python扩展算法
		* 具有视频播放功能
		* __需要显示深度学习网络中不同结点的输出结果__

		决策：
	* 这个不能占用太长时间，不能当重点

	* 学习的平台，IPython足够好，只要能看算法效果就可以了

	* Opencv, 做环境， [[devtools:cpplib:opencv]]
	* 整理一些算法思路，分给王晓东做一部分


===== 显示和标注 =====
	结论：MTL+IPython+MITK
	[[Home:devtools:viz-2d:MITK]] 医学影像处理软件，功能齐全


===== 部署方式 =====
	人机交互


===== 业务场景 =====

==== 人脸识别 ====
以Face为入手点，目标
* 构造一个应用FaceMark
	* 虽然这个目标暂时没有明确的应用场景，但技术场景很明确，通过这个过程可以达到技术提升的目标，所以目前依然有必要执行这个目标
	* CV 
	* Caffe2
	* 一个CV平台，MITK
	* 其间要把重要的ML算法搞清楚

=== 算法展示工具 ===
	* 微软的智能接口有一个用Python写的测试工具，仿这个工具做为算法展示的平台
	* 不做实时处理，避开计算量大的问题，首先解决有没有，再解决好不好
	* 一组开发库，一个界面，
	* 开发库用cmake写，有测试数据，和性能测试数据
	* 界面还是要的，需要修改参数看效果，Mvvm+json就可以
	* 好像PPT就够用了
	* 另一种变通办法，一个线程播视频，另一个线程取关键帧，凡是涉及到界面交互的情况就要尽量避免开费时间
	* 还不如用twitter的视频处理框架只处理关键帧，然后生成一个视频

=== 与公司内其他组的区别 ===
	* 如果其他组能提供完整的模型和算法接口，那自然好，直接做应用就可以了，如果算法和接口不完备，又想实验想法，就要自己动手
	* 这是一个基线，有了之后，可以进行进一步的安排。没有，则什么都做不了

==== 异常检测 ====
	向赵云松要一些数据
	胸片数据的异常检测
	胸片数据的网格划分，橡皮变换
	GAN用于异常数据的生成，和算法训练


====== 部署 ======
	* Qt，已走通这条路
	* MTL，以插件的形式


===== 基础平台 =====

==== 深度学习框架 ====
	* torch训练算法，ignite，visdom
	* 导入导出模型
		* 不同框架模型的相互转换
			* caffe转换成caffe2模型[已验证]
	* caffe2做应用

==== 应用软件基础设施 ====
	* Poco的插件系统
	* MITK的显示框架
	* CTK
	* ASAP

==== 专用功能 ====

=== 视频处理框架 ===
* MTL
* twitter的框架

=== 播放器 ===
	* Qt的播放器不好用了，直接不播，依赖于操作系统本身的编解码器
		* 解决办法，安装开源的DirectShow编解码包，
		* http://www.codecguide.com/
		* 但是编解码器的效率直接影响播放效果，速度
	* 避开这个问题，做成一个图片识别工具，不要处理视频
		* 避开计算量问题
		* 已有解决方案，而且比较好用QTAV, libopenshot, mtl, shotcut, QtMultiMedia

=== 相机 ===
目前可以不处理相机的方位问题
	* 避开



