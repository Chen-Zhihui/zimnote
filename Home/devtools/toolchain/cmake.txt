Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-08-23T13:58:47+08:00

====== cmake ======
Created 星期四 23 八月 2018

generator
target

====== VS Code ======

====== VS 2017 ======
https://blogs.msdn.microsoft.com/vcblog/2016/10/05/cmake-support-in-visual-studio/
https://blogs.msdn.microsoft.com/vcblog/2016/12/20/cmake-support-in-visual-studio-2017-whats-new-in-the-rc-update/
https://blogs.msdn.microsoft.com/vcblog/2016/11/16/cmake-support-in-visual-studio-the-visual-studio-2017-rc-update/

环境变量的支持和宏指令： CMakeSettings.json支持对任意一种配置特性使用环境变量。使用语法${env.FOO} 来扩展环境变量%FOO%。
可以在这个文件中访问内置宏:
	${workspaceRoot}-提供工作空间文件夹的全部路径
	${workspaceRoot}-哈希工作空间路径；对当前的工作空间创建一个唯一的标识符是非常有用的（例如在文件夹路径中使用）
	${projectFile}-CMakeLists.txt根目录的完整路径
	${projectDir}- CMakeLists.txt根目录文件夹的完整路径
	${thisFile}-CMakeLists.txt文件的完整路径
	${name}-配置的名称
	${generator}-此配置中使用CMake 生成器的名称


====== CMAKE ======

===== cmd =====
cmake --build {BUILD_DIR_PATH} --target ALL_BUILD --config {BUILD_TYPE}
Example
cmake --build . --target ALL_BUILD --config Release
Long answer
cmake -G{GENERATOR_NAME} -B{BUILD_DIR_PATH} -H{SOURCE_DIR_PATH}
cmake --build {BUILD_DIR_PATH} --target ALL_BUILD --config {BUILD_TYPE}
Example
cmake -GVisual Studio 14 -Bbuild/win32/x86 -H.    
cmake --build build/win32/x86 --target ALL_BUILD --config Release
Additional info
	"-G" - specifies the generator name
	"-B" - specifies path to the build folder
	"-H" - specifies path to the source folder


====== cross platform switch ======

| toolchain | windows              | linux | mac       | ios | android |
|:----------|:---------------------|:------|:----------|:----|:--------|
| c++       | _MSC_VER  _WIN32     |       |           |     |         |
| cmake     | if(WIN32)            |       | if(APPLE) |     |         |
| qmake     | win32 win32-msvc2012 |       | mac       | ios | android |


SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Debug Postfitx for lib, samples and tools")

====== if ======

if(CMAKE_BUILD_TYPE MATCHES "Debug")	


===== add_library =====

target_compile_definitions
target_compile_features
target_compile_options
target_include_directoires
target_link_libraries
target_sources

===== export install =====

===== install =====

==== 头文件 ====
install(
	DIRECTORY include/Poco
	DESTINATION include
	COMPONENT Devel
	PATTERN ".svn" EXCLUDE
	)


==== 编译成果 ====
install(
	TARGETS "${target_name}" EXPORT "${target_name}Targets"
	LIBRARY DESTINATION lib${LIB_SUFFIX}
	ARCHIVE DESTINATION lib${LIB_SUFFIX}
	RUNTIME DESTINATION bin
	INCLUDES DESTINATION include
	)
PDB
	get_property(type TARGET ${target_name} PROPERTY TYPE)
	if ("${type}" STREQUAL "SHARED_LIBRARY" OR "${type}" STREQUAL "EXECUTABLE")
		install(
			FILES $<TARGET_PDB_FILE:${target_name}>
			DESTINATION bin
			COMPONENT Devel
			OPTIONAL
			)
	endif()


PocoJSONConfigVersion.cmake    
	include(CMakePackageConfigHelpers)
	write_basic_package_version_file(
	  "${CMAKE_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}${target_name}ConfigVersion.cmake"
	  VERSION ${PROJECT_VERSION}
	  COMPATIBILITY AnyNewerVersion
	)
	
PocoJSONConfig.cmake           
	configure_file("cmake/Poco${target_name}Config.cmake"
	  "${CMAKE_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}${target_name}Config.cmake"
	  @ONLY
	)
	
	install(
		FILES
			"${CMAKE_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}${target_name}Config.cmake"
			"${CMAKE_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}${target_name}ConfigVersion.cmake"
		DESTINATION "lib${LIB_SUFFIX}/cmake/${PROJECT_NAME}"
		COMPONENT Devel
		)

PocoJSONTargets.cmake
PocoJSONTargets-debug.cmake
PocoJSONTargets-release.cmake
	export(EXPORT "${target_name}Targets"
	  FILE "${CMAKE_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}${target_name}Targets.cmake"
	  NAMESPACE "${PROJECT_NAME}::"
	)
	install(
		EXPORT "${target_name}Targets"
		FILE "${PROJECT_NAME}${target_name}Targets.cmake"
		NAMESPACE "${PROJECT_NAME}::"
		DESTINATION "lib${LIB_SUFFIX}/cmake/${PROJECT_NAME}"
		)


==== reference ====

#===============================================================================
# Macros for Package generation
#
#  POCO_GENERATE_PACKAGE - Generates *Config.cmake
#    Usage: POCO_GENERATE_PACKAGE(target_name)
#      INPUT:
#           target_name             the name of the target. e.g. Foundation for PocoFoundation
#    Example: POCO_GENERATE_PACKAGE(Foundation)
macro(POCO_GENERATE_PACKAGE target_name)




set(ConfigPackageLocation "lib/cmake/${PROJECT_NAME}")





endmacro()


===== use 3rd =====

===== link debug and release =====
add_executable( MyEXE ${SOURCES})
target_link_libraries( MyEXE debug 3PDebugLib)
target_link_libraries( MyEXE optimized 3PReleaseLib)
