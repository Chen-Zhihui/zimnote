Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-08-28T17:09:51+08:00

====== tracking ======
Created 星期二 28 八月 2018


===== base =====

==== algorithms ====
{{{code: lang="cpp" linenumbers="True"
vector<string> trackerTypes = { "BOOSTING", "MIL", "KCF", "TLD", "MEDIANFLOW", "GOTURN", "MOSSE", "CSRT" };

// create tracker by name
Ptr<Tracker> createTrackerByName(string trackerType)
{
	Ptr<Tracker> tracker;
	if (trackerType == trackerTypes[0])
		tracker = TrackerBoosting::create();
	else if (trackerType == trackerTypes[1])
		tracker = TrackerMIL::create();
	else if (trackerType == trackerTypes[2])
		tracker = TrackerKCF::create();
	else if (trackerType == trackerTypes[3])
		tracker = TrackerTLD::create();
	else if (trackerType == trackerTypes[4])
		tracker = TrackerMedianFlow::create();
	else if (trackerType == trackerTypes[5])
		tracker = TrackerGOTURN::create();
	else if (trackerType == trackerTypes[6])
		tracker = TrackerMOSSE::create();
	else if (trackerType == trackerTypes[7])
		tracker = TrackerCSRT::create();
	else {
		cout << "Incorrect tracker name" << endl;
		cout << "Available trackers are: " << endl;
		for (vector<string>::iterator it = trackerTypes.begin(); it != trackerTypes.end(); ++it)
			std::cout << " " << *it << endl;
	}
	return tracker;
}
}}}



====== multi track ======
{{{code: lang="cpp" linenumbers="True"
//tracking 
		// Specify the tracker type
		string trackerType = configFile().getString("tracker", "KCF");
		// Create multitracker
		Ptr<MultiTracker> multiTracker = cv::MultiTracker::create();

		bool mtOk = false;
		long long frameCount = 0;
		long long detectCount = 0;
		long long trackCount = 0;

		int skip = configFile().getInt("skip", 8);

		double start = (double)getTickCount();
		
		std::vector<Rect2d> faces;
		while (cap.isOpened())
		{
			// get frame from the video
			cap >> frame;
			frameCount++;

			// Stop the program if reached end of video
			if (frame.empty()) 
				break;

			if (mtOk) {
				if (frameCount % skip == 0) {
					faces.clear();
					mtOk = multiTracker->update(frame, faces);
					if (mtOk) {
						//todo output time line and face rect
						//maybe failed partly
					}
					cvn::Face::Base::drawFaceRecs(frame, faces, Scalar(0, 0, 255));
					trackCount++;
				}
			}
			else {
				// detect
				faces.clear();
				cv::face::getFaces(frame, faces, cparams.get());
				auto msg_face = "face detected with count = {}"_format(faces.size());
				logger().information(msg_face);
				cout << msg_face << endl;

				multiTracker = cv::MultiTracker::create();
				// Initialize multitracker
				for (int i = 0; i < faces.size(); i++)
					multiTracker->add(createTrackerByName(trackerType), frame, Rect2d(faces[i]));

				auto msg = "multi tracker reinitialized at frame = {}"_format(frameCount);
				logger().information(msg);
				cout << msg << endl;

				mtOk = true; // multiTracker->update(frame);

				cvn::Face::Base::drawFaceRecs(frame, faces, Scalar(0, 255, 0));

				detectCount++;
			}

			cvn::Face::Base::drawFaceRecs(frame, faces, Scalar(255, 0, 0));

			writer << frame;
			{
				if (frameCount % 25 == 0) {
					auto msg = "frame id={}, face count={}, detect index={}, track index={}"_format(frameCount, faces.size(), detectCount, trackCount);
					logger().information(msg);
					cout << msg << endl;

					double dur = ((double)getTickCount() - start) / getTickFrequency();
					msg = "frame rate by track = {} frame/sec"_format(frameCount / dur);
					logger().information(msg);
					cout << msg << endl;
				}
			}

			// quit on x button
			if (waitKey(1) == 27) break;

		}
}}}
